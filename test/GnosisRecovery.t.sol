// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8;

import {Test, console} from "forge-std/Test.sol";

interface IProxyFactory {
    function createProxyWithNonce(address _singleton, bytes initializer, uint256 saltNonce)
        external
        returns (address proxy);
}

contract GnosisRecovery is Test {
    uint256 constant oasysChainId = 248;
    address constant oasysToken = 0x5200000000000000000000000000000000000023;

    address constant safeProxyFactory = 0x0499ad1BFa13a2F24B8a6fe0C98ebc274B76fcEc;

    address constant _singleton = 0x914d7Fec6aaC8cd542e72Bca78B30650d45643d7;
    bytes constant initializer =
        hex"b63e800d00000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001c0000000000000000000000000f48f2b2d2a534e402487b3ee7c18c33aec0fe5e4000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000500000000000000000000000024fcb9ed2bfa9264526bd675aaf392526abe19c1000000000000000000000000f8c1c8b85ecb964650f127755a7394f1520183b1000000000000000000000000cad56fae244546d0a53e8afe285acd37a49e276000000000000000000000000061dbceef9a7242c801b9d3583bec18f43ed88054000000000000000000000000c7aa1b2cf8c7ab9ff354411320c4c4f3f9bf35500000000000000000000000000000000000000000000000000000000000000000";
    uint256 constant saltNonce = 1671221880388;

    function deploySafe() public {
        return IProxyFactory(safeProxyFactory).createProxyWithNonce(_singleton, initializer, saltNonce);
    }

    function testRecoverTokens() public {
        address safeAddress = deploySafe();
        console.log("Safe address: %s", safeAddress);
    }
}
